---
title: "Hands-On_Ex07"
author: "Ding Hong Yan"
date-modified: "last-modified" 
execute:
  echo: true
  eval: true
  warning: false
  freeze: true
---

## **7.1 Learning Outcome**

Visualising uncertainty is relatively new in statistical graphics. In this chapter, you will gain hands-on experience on creating statistical graphics for visualising uncertainty. By the end of this chapter you will be able:

-   to plot statistics error bars by using ggplot2,

-   to plot interactive error bars by combining ggplot2, plotly and DT,

-   to create advanced by using ggdist, and

-   to create hypothetical outcome plots (HOPs) by using ungeviz package.

## **7.2 Getting Started**

### **7.2.1 Installing and loading the packages**

For the purpose of this exercise, the following R packages will be used, they are:

-   tidyverse, a family of R packages for data science process,

-   plotly for creating interactive plot,

-   gganimate for creating animation plot,

-   DT for displaying interactive html table,

-   crosstalk for for implementing cross-widget interactions (currently, linked brushing and filtering), and

-   ggdist for visualising distribution and uncertainty.

```{r}
pacman::p_load(plotly, crosstalk, DT, 
               ggdist, ggridges, colorspace,
               gganimate, tidyverse)
```

### **7.2.2 Data import**

For the purpose of this exercise, *Exam_data.csv* will be used.

```{r}
exam <- read_csv("data/Exam_data.csv")
```

## **7.3 Visualizing the uncertainty of point estimates: ggplot2 methods**

A point estimate is a single number, such as a mean. Uncertainty, on the other hand, is expressed as standard error, confidence interval, or credible interval.

::: callout-important
-   Don’t confuse the uncertainty of a point estimate with the variation in the sample
:::

In this section, you will learn how to plot error bars of maths scores by race by using data provided in *exam* tibble data frame.

Firstly, code chunk below will be used to derive the necessary summary statistics.

```{r}
my_sum <- exam %>%
  group_by(RACE) %>%
  summarise(
    n=n(),
    mean=mean(MATHS),
    sd=sd(MATHS)
    ) %>%
  mutate(se=sd/sqrt(n-1))
```

::: callout-tip
## Things to learn from the code chunk above

-   `group_by()` of **dplyr** package is used to group the observation by RACE,

-   `summarise()` is used to compute the count of observations, mean, standard deviation

-   `mutate()` is used to derive standard error of Maths by RACE, and

-   the output is save as a tibble data table called *my_sum*.
:::

::: callout-note
For the mathematical explanation, please refer to Slide 20 of Lesson 4.
:::

Next, the code chunk below will be used to display *my_sum* tibble data frame in an html table format.

::: panel-tabset
## The code

```{r, echo=TRUE, eval=FALSE}
#| message: false
#| warning: false
knitr::kable(head(my_sum), format = 'html')
```

## The table

```{r}
#| echo: false
#| message: false
#| warning: false
knitr::kable(head(my_sum), format = 'html')
```
:::

::: callout-note
`head(my_sum)` will select the first 6 rows of `my_sum`.

`knitr::kable(..., format = 'html')` will format these 6 rows of data into an HTML table.
:::

### **7.3.1 Plotting standard error bars of point estimates**

Now we are ready to plot the standard error bars of mean maths score by race as shown below.

:::: panel-tabset
## The plot

```{r}
#| echo: false
#| message: false
#| warning: false
ggplot(my_sum) +
  geom_errorbar(
    aes(x=RACE, 
        ymin=mean-se, 
        ymax=mean+se), 
    width=0.2, 
    colour="black", 
    alpha=0.9, 
    linewidth=0.5) +
  geom_point(aes
           (x=RACE, 
            y=mean), 
           stat="identity", 
           color="red",
           size = 1.5,
           alpha=1) +
  ggtitle("Standard error of mean maths score by rac")
```

## The code

```{r, echo=TRUE, eval=FALSE}
ggplot(my_sum) +
  geom_errorbar(
    aes(x=RACE, 
        ymin=mean-se, 
        ymax=mean+se), 
    width=0.2, 
    colour="black", 
    alpha=0.9, 
    linewidth=0.5) +
  geom_point(aes
           (x=RACE, 
            y=mean), 
           stat="identity", 
           color="red",
           size = 1.5,
           alpha=1) +
  ggtitle("Standard error of mean maths score by rac")
```

::: callout-tip
## Things to learn from the code chunk above

-   The error bars are computed by using the formula mean+/-se.

-   For `geom_point()`, it is important to indicate *stat=“identity”*.
:::
::::

### **7.3.2 Plotting confidence interval of point estimates**

Instead of plotting the standard error bar of point estimates, we can also plot the confidence intervals of mean maths score by race.

:::: panel-tabset
## The plot

```{r}
#| echo: false
#| message: false
#| warning: false
ggplot(my_sum) +
  geom_errorbar(
    aes(x=reorder(RACE, -mean), 
        ymin=mean-1.96*se, 
        ymax=mean+1.96*se), 
    width=0.2, 
    colour="black", 
    alpha=0.9, 
    linewidth=0.5) +
  geom_point(aes
           (x=RACE, 
            y=mean), 
           stat="identity", 
           color="red",
           size = 1.5,
           alpha=1) +
  labs(x = "Maths score",
       title = "95% confidence interval of mean maths score by race")
```

## The code

```{r, echo=TRUE, eval=FALSE}
ggplot(my_sum) +
  geom_errorbar(
    aes(x=reorder(RACE, -mean), 
        ymin=mean-1.96*se, 
        ymax=mean+1.96*se), 
    width=0.2, 
    colour="black", 
    alpha=0.9, 
    linewidth=0.5) +
  geom_point(aes
           (x=RACE, 
            y=mean), 
           stat="identity", 
           color="red",
           size = 1.5,
           alpha=1) +
  labs(x = "Maths score",
       title = "95% confidence interval of mean maths score by race")
```

::: callout-tip
## Things to learn from the code chunk above

-   The confidence intervals are computed by using the formula mean+/-1.96\*se.

-   The error bars is sorted by using the average maths scores.

-   `labs()` argument of ggplot2 is used to change the x-axis label.
:::
::::

::: callout-note
## x=reorder(RACE, -mean)

`reorder(RACE, -mean)` is used to reorder `RACE` based on the mean (average math score), with the `-` sign indicating sorting **from highest to lowest** (by default, it sorts from lowest to highest).
:::

### **7.3.3 Visualizing the uncertainty of point estimates with interactive error bars**

In this section, you will learn how to plot interactive error bars for the 99% confidence interval of mean maths score by race as shown in the figure below.

::: panel-tabset
## The plot

```{r}
#| echo: false
#| message: false
#| warning: false
shared_df = SharedData$new(my_sum)

bscols(widths = c(4,8),
       ggplotly((ggplot(shared_df) +
                   geom_errorbar(aes(
                     x=reorder(RACE, -mean),
                     ymin=mean-2.58*se, 
                     ymax=mean+2.58*se), 
                     width=0.2, 
                     colour="black", 
                     alpha=0.9, 
                     size=0.5) +
                   geom_point(aes(
                     x=RACE, 
                     y=mean, 
                     text = paste("Race:", `RACE`, 
                                  "<br>N:", `n`,
                                  "<br>Avg. Scores:", round(mean, digits = 2),
                                  "<br>95% CI:[", 
                                  round((mean-2.58*se), digits = 2), ",",
                                  round((mean+2.58*se), digits = 2),"]")),
                     stat="identity", 
                     color="red", 
                     size = 1.5, 
                     alpha=1) + 
                   xlab("Race") + 
                   ylab("Average Scores") + 
                   theme_minimal() + 
                   theme(axis.text.x = element_text(
                     angle = 45, vjust = 0.5, hjust=1)) +
                   ggtitle("99% Confidence interval of average /<br>maths scores by race")), 
                tooltip = "text"), 
       DT::datatable(shared_df, 
                     rownames = FALSE, 
                     class="compact", 
                     width="100%", 
                     options = list(pageLength = 10,
                                    scrollX=T), 
                     colnames = c("No. of pupils", 
                                  "Avg Scores",
                                  "Std Dev",
                                  "Std Error")) %>%
         formatRound(columns=c('mean', 'sd', 'se'),
                     digits=2))
```

## The code

```{r, echo=TRUE, eval=FALSE}
shared_df = SharedData$new(my_sum)

bscols(widths = c(4,8),
       ggplotly((ggplot(shared_df) +
                   geom_errorbar(aes(
                     x=reorder(RACE, -mean),
                     ymin=mean-2.58*se, 
                     ymax=mean+2.58*se), 
                     width=0.2, 
                     colour="black", 
                     alpha=0.9, 
                     size=0.5) +
                   geom_point(aes(
                     x=RACE, 
                     y=mean, 
                     text = paste("Race:", `RACE`, 
                                  "<br>N:", `n`,
                                  "<br>Avg. Scores:", round(mean, digits = 2),
                                  "<br>95% CI:[", 
                                  round((mean-2.58*se), digits = 2), ",",
                                  round((mean+2.58*se), digits = 2),"]")),
                     stat="identity", 
                     color="red", 
                     size = 1.5, 
                     alpha=1) + 
                   xlab("Race") + 
                   ylab("Average Scores") + 
                   theme_minimal() + 
                   theme(axis.text.x = element_text(
                     angle = 45, vjust = 0.5, hjust=1)) +
                   ggtitle("99% Confidence interval of average /<br>maths scores by race")), 
                tooltip = "text"), 
       DT::datatable(shared_df, 
                     rownames = FALSE, 
                     class="compact", 
                     width="100%", 
                     options = list(pageLength = 10,
                                    scrollX=T), 
                     colnames = c("No. of pupils", 
                                  "Avg Scores",
                                  "Std Dev",
                                  "Std Error")) %>%
         formatRound(columns=c('mean', 'sd', 'se'),
                     digits=2))
```
:::

::: callout-note
## SharedData\$new(my_sum)

*SharedData*: It **enables linking between interactive charts and tables**.This means **if a user selects a category in one visualization (e.g., a table), other linked plots will update accordingly**.
:::

::: callout-note
## bscols(widths = c(4,8))

*bscols()*: It **arranges multiple visual elements (charts/tables) in a horizontal layout**.

*widths = c(4,8):*

-   Specifies the **relative widths** of the two components:

    -   `4` → **First component** (e.g., a datatable).

    -   `8` → **Second component** (e.g., an interactive `plotly` graph).

-   This means **the first element (table) takes 4/12 of the width, while the second (graph) takes 8/12**.
:::

::: callout-note
## "\<br\>N:", \`n\`

-   `"<br>"` – An **HTML line break** to separate tooltip information.

-   `"N:"` – Indicates the **sample size** (number of students in that race category).

-   `n` – Inserts the sample size value.
:::

## **7.4 Visualising Uncertainty: ggdist package**

-   [**ggdist**](https://mjskay.github.io/ggdist/index.html) is an R package that provides a flexible set of ggplot2 geoms and stats designed especially for visualising distributions and uncertainty.

-   It is designed for both frequentist and Bayesian uncertainty visualization, taking the view that uncertainty visualization can be unified through the perspective of distribution visualization:

    -   for frequentist models, one visualises confidence distributions or bootstrap distributions (see vignette(“freq-uncertainty-vis”));

    -   for Bayesian models, one visualises probability distributions (see the tidybayes package, which builds on top of ggdist).

![](image.png)

### **7.4.1 Visualizing the uncertainty of point estimates: ggdist methods**

In the code chunk below, [`stat_pointinterval()`](https://mjskay.github.io/ggdist/reference/stat_pointinterval.html) of **ggdist** is used to build a visual for displaying distribution of maths scores by race.

```{r}
exam %>%
  ggplot(aes(x = RACE, 
             y = MATHS)) +
  stat_pointinterval() +
  labs(
    title = "Visualising confidence intervals of mean math score",
    subtitle = "Mean Point + Multiple-interval plot")
```

::: callout-note
This function comes with many arguments, students are advised to read the syntax reference for more detail.
:::

For example, in the code chunk below the following arguments are used:

-   .width = 0.95

-   .point = median

-   .interval = qi

```{r}
#| message: false
#| warning: false
exam %>%
  ggplot(aes(x = RACE, y = MATHS)) +
  stat_pointinterval(.width = 0.95,
  .point = median,
  .interval = qi) +
  labs(
    title = "Visualising confidence intervals of median math score",
    subtitle = "Median Point + Multiple-interval plot")
```

::: callout-note
## stat_pointinterval()

-   **`.width = 0.95`**\
    → Specifies a **95% confidence interval** (indicating that the interval represents a 95% credible region).

-   **`.point = median`**\
    → Uses the **median** as the representative value (instead of the mean).

-   **`.interval = qi`**\
    → Uses `qi` (**highest density interval, HDI**) to calculate the interval. This is a **Bayesian statistical method** for estimating credible intervals (different from traditional confidence intervals).
:::

### **7.4.2 Visualizing the uncertainty of point estimates: ggdist methods**

```{r}
#| message: false
#| warning: false
exam %>%
  ggplot(aes(x = RACE, y = MATHS)) +
  stat_pointinterval(.width = 0.99,
  .point = median,
  .interval = qi) +
  labs(
    title = "Visualising confidence intervals of median math score",
    subtitle = "Median Point + Multiple-interval plot")
```

```{r}
exam %>%
  ggplot(aes(x = RACE, 
             y = MATHS)) +
  stat_pointinterval(
    show.legend = FALSE) +   
  labs(
    title = "Visualising confidence intervals of mean math score",
    subtitle = "Mean Point + Multiple-interval plot")
```

::: callout-note
## show.legend = FALSE

-   **`show.legend`** is a parameter that controls whether the legend for that specific layer (in this case, the point-interval plot) is displayed.

-   **`show.legend = FALSE`** means that **the legend will not be shown** for this specific layer.
:::

### **7.4.3 Visualizing the uncertainty of point estimates: ggdist methods**

In the code chunk below, [`stat_gradientinterval()`](https://mjskay.github.io/ggdist/reference/stat_gradientinterval.html) of **ggdist** is used to build a visual for displaying distribution of maths scores by race.

```{r}
exam %>%
  ggplot(aes(x = RACE, 
             y = MATHS)) +
  stat_gradientinterval(   
    fill = "skyblue",      
    show.legend = TRUE     
  ) +                        
  labs(
    title = "Visualising confidence intervals of mean math score",
    subtitle = "Gradient + interval plot")
```

::: callout-note
## stat_gradientinterval()

is a statistical layer in `ggplot2` used to create plots with gradient-filled intervals, often used for visualizing interval estimates, with color representing different ranges of the interval.
:::

::: callout-note
## stat_pointinterval() vs stat_gradientinterval()

### **Key Differences**:

-   **Appearance**:

    -   `stat_pointinterval()` uses **lines** (or points) with intervals shown as segments around the point.

    -   `stat_gradientinterval()` uses **gradient-filled intervals** to represent uncertainty, often creating a smoother, more visually continuous display.

-   **Focus**:

    -   `stat_pointinterval()` focuses on displaying the **point estimate** (e.g., median) and its surrounding interval.

    -   `stat_gradientinterval()` focuses on showing the **distribution** or **uncertainty** with a **gradient** that changes across the interval.

### **Summary**:

-   **`stat_pointinterval()`** is for plotting point estimates with intervals (e.g., confidence/credible intervals).

-   **`stat_gradientinterval()`** is for plotting intervals with **gradient fills** to emphasize the distribution or uncertainty.
:::

## **7.5 Visualising Uncertainty with Hypothetical Outcome Plots (HOPs)**

### **7.5.1 Installing ungeviz package**

```{r}
devtools::install_github("wilkelab/ungeviz")
```

### **7.5.2 Launch the application in R**

```{r}
library(ungeviz)
```

### **7.5.3 Visualising Uncertainty with Hypothetical Outcome Plots (HOPs)**

Next, the code chunk below will be used to build the HOPs.

```{r}
ggplot(data = exam, 
       (aes(x = factor(RACE), 
            y = MATHS))) +
  geom_point(position = position_jitter(
    height = 0.3, 
    width = 0.05), 
    size = 0.4, 
    color = "#0072B2", 
    alpha = 1/2) +
  geom_hpline(data = sampler(25, 
                             group = RACE), 
              height = 0.6, 
              color = "#D55E00") +
  theme_bw() + 
  transition_states(.draw, 1, 3)
```

::: callout-note
-   `geom_point()`: Creates a scatter plot to display each data point.

    -   `position = position_jitter(height = 0.3, width = 0.05)`: Adds jitter to the points to prevent overlap. The `height = 0.3` and `width = 0.05` set the amount of jitter in the vertical and horizontal directions.

    -   `size = 0.4`: Specifies the size of the points.

    -   `color = "#0072B2"`: Sets the color of the points to blue (using hexadecimal color code).

    -   `alpha = 1/2`: Sets the transparency of the points to 0.5, making them semi-transparent.
:::

::: callout-note
`geom_hpline()`: This custom function adds horizontal lines to the plot.

-   `data = sampler(25, group = RACE)`: The `sampler()` function samples 25 observations from the `exam` dataset based on the `RACE` variable, generating a dataset for each race group.

-   `height = 0.6`: Sets the height of the horizontal line, representing the range of the displayed area.

-   `color = "#D55E00"`: Specifies the color of the horizontal lines as red.
:::

::: callout-note
`theme_bw()`: Applies a black-and-white theme to the plot, which typically results in a clean and professional appearance with white backgrounds and black axis lines and gridlines.
:::

::: callout-note
`transition_states(.draw, 1, 3)`: This function comes from `gganimate` and is used to create animation effects.

-   `.draw`: Refers to the variable being altered in the animation (usually some part of the drawing process).

-   `1` and `3`: Represent the start and end times for the animation transition, which might control the timing or speed of the animation. This allows the plot to change over time, showing different stages of the data.
:::
